#profe mand√© un chat de blackbox donde ya hab√≠an chateado con la IA :(
#revisa el final del chat 

import os
dict_orders = {}

def f_clean():
    os.system('cls')
    print('=======: üçΩÔ∏è  RESTAURANT MENU ORDER üçΩÔ∏è  :========\nBy: Menesex\nPlease read and follow the instructions\n===========================================\n\n')

def f_order():
    
    while True:
        f_clean()
        print('====: üõéÔ∏è  < ORDER MENU > üõéÔ∏è  :====\n')
        op2 = int(input('üî¥ Back to principal menu[0]\n[1] üü¢ Add an order üü¢\n--> '))    
        if op2 == 0:
            break
        elif op2 == 1:
            #add the order
            #--------------VALIDATION OF DATA STARTS------------------------
            while True:
                try:
                    tableN = input('Digit the table number --> ')
                    tableN = int(tableN)
                    if tableN <= 0:
                        raise ValueError("The table number must be a positive integer.")
                    break
                except ValueError as e:
                    print(e)

            order = input('Write your order here --> ')

            while True:
                try:
                    quantity = input('Quantity? --> ')
                    quantity = int(quantity)
                    if quantity <= 0:
                        raise ValueError("The quantity must be a positive integer.")
                    break
                except ValueError as e:
                    print(e)
            #--------------VALIDATION OF DATA ENDS------------------------
            
            if tableN not in dict_orders:
                dict_orders[tableN] = [f'[{quantity}] {order}']
            elif op2 == 1:
                dict_orders[tableN].append(f'[{quantity}] {order}')
        else:
            input('Invalid option <ENTER>')

def f_query():
    while True:
        f_clean()
        option = int(input('====: CONSULT MENU :====\nüî¥ Back to main menu[0]\n[1] üìö Consult all orders üìö\n[2] üìÉ Consult by table üìÉ\n---> '))
        if option == 0:
            break
        elif option == 1:
            f_clean()
            print('====: üìö ALL ORDERS üìö :====')
            for table, orders in dict_orders.items():
                print(f'Table {table}: {orders}')
            input('<ENTER>')
        elif option == 2:
            f_clean()
            print('====: üìÉ ORDERS BY TABLE NUMBER üìÉ :====')
            tableN = input('Enter table number: ')
            if tableN in dict_orders:
                print(f'Table {tableN}: {dict_orders[tableN]}')
            else:
                print(f'No orders found for table {tableN}.')
            input('<ENTER>')

def f_modify():
    f_clean()
    tableN = input('Enter the table number to modify: ')
    
    if tableN in dict_orders:
        print(f'Current orders for table {tableN}: {dict_orders[tableN]}')
        #index to modify the specific order from the dict
        index = int(input('Digit the order number to modify ([1]-[2]-[3]...) --> ')) - 1 #(-1 for iterate all the index from 'dict_orders')
        
        #Modify the order if the index exist
        if 0 <= index < len(dict_orders[tableN]):
            new_quantity = input('Enter new quantity: ')
            
            # Get the existing item without the quantity
            existing_order = dict_orders[tableN][index]
            item_start = existing_order.find(' ') + 1
            item_name = existing_order[item_start:]

            # Keep the item content the same and update the quantity
            dict_orders[tableN][index] = f'[{new_quantity}] {item_name}'
        else:
            print('‚ö†Ô∏è Invalid order number ‚ö†Ô∏è.')
            
    else:
        print(f'‚ö†Ô∏è No orders found for table {tableN}. ‚ö†Ô∏è')
    input('<ENTER>')

def f_delete():
    
    while True:
        f_clean()
        option = int(input('====: ‚ùå DELETE MENU ‚ùå :====\nüî¥ Back to main menu[0]\n[1] Delete a table ‚ùó\n[2] Delete for order from table 1Ô∏è‚É£\n---> '))
        if option == 0:
            break
        
        #Delete an entire table
        elif option == 1: 
            tableN = input('Enter the table number to delete an order from: ')
            if tableN in dict_orders:
                #delete the order if the index exist
                del dict_orders[tableN]
                print('Table deleted.')
                print(f'Orders deleteds for table {tableN}: {dict_orders[tableN]}')
            else:
                print(f'Table {tableN} not found.')
            input('<ENTER>')
        
        #Delete for order from table
        elif option == 2: 
            tableN = input('Enter the table number to delete an order from: ')
            if tableN in dict_orders:
                print(f'Current orders for table {tableN}: {dict_orders[tableN]}')
                #index to delete the specific order from the dict
                index = int(input('Enter the order number to delete (1, 2, 3, ...): ')) - 1 #(-1 for iterate all the index from 'dict_orders')
                
                #delete the order if the index exist
                if 0 <= index < len(dict_orders[tableN]):
                    del dict_orders[tableN][index]
                    
                    #if the new orders are empty, delete the table from the dict
                    if not dict_orders[tableN]:
                        del dict_orders[tableN]
                    print('Order deleted.')
                else:
                    print('Invalid order number.')
                    
            else:
                print(f'No orders found for table {tableN}.')
            input('<ENTER>')

def f_selector(op):
    global sw1
    if op == 0:
        sw1 = False
    elif op == 1:
        f_order()
    elif op == 2:
        f_query()
    elif op == 3:
        f_modify()
    elif op == 4:
        f_delete()

#----------------------------------------------------------------------------------------------------
sw1 = True
while sw1:
    while True:
        f_clean()
        op = int(input('====: ‚ô®Ô∏è üçΩÔ∏è  <<< PRINCIPAL MENU >>> üçΩÔ∏è ‚ô®Ô∏è  :====\nüî¥ Exit[0]\n[1] üõéÔ∏è   Order menu üõéÔ∏è\n[2] üìÑ Query the orders üìÑ\n[3] üîé Modify an order üîé\n[4] ‚ùå Delete an order ‚ùå\n--> '))
        if 0 <= op <= 4:
            f_selector(op)
            break
